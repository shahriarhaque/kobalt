package kobaltBasic;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;

/**
 * An advanced version of the {@link BasicActor} class that allows high-precision rotation of the
 * rendered images. Rotation is controlled through the <code>velocity</code> and the
 * <code>heading</code> varaiables. Rendering of this type of game elements are optimized for
 * quality and not for speed.
 * @author Shahriar Haque
 *
 */
public abstract class RotatingActor extends BasicActor {

	/** Heading independent velocity of the game elements. **/
	public double velocity;
	
	public double rotational_velocity = 0;
	
	public double anchor_x = 0;
	public double anchor_y = 0;
	

	/** Heading of the game element in degrees. **/
	public double heading;

	///** X component of speed change **/
	//public int dx;

	///** Y component of speed change **/
	//public int dy;

	private double tempHeading;


	public RotatingActor(double x, double y) {
		super(x,y);	
	}

	/**
	 * Modified version of the {@link BasicActor#update()} method that changes the location
	 * based on the <code>heading</code> and <code>velocity</code> values. The <code>x_velocity
	 * </code> and <code>y_velocity</code> variables are changed in this process.
	 */
	public void update(){

		double fraction = (BasicGame.interval/1000.0);
		
		heading += rotational_velocity*fraction;
		
		tempHeading = (heading%360); // allows full 360 rotation

		if(tempHeading < 0) tempHeading += 360; // fixes negative headings

		x_velocity = velocity*sineTable[(int)tempHeading];
		y_velocity = -velocity*sineTable[(int)( (tempHeading+90)%360 )];

		
		x += (x_velocity * fraction);
		y += (y_velocity * fraction);

	}

	/**
	 * Renders high-quality rotated images of the GameEntity using bilinear interpolation with anti-aliasing.
	 * @param g The graphics context on to which the sprite is to be rendered.
	 */
	public abstract void render(Graphics2D g);

	public void renderBounds(Graphics2D g){
		g.setColor(Color.white);
		g.draw(getBounds());
		
	}

	
	public Area getBounds(){
		AffineTransform transform = new AffineTransform();
		transform.translate(x, y);
		
		double theta = Math.toRadians(heading);
		transform.rotate(theta, 0, 0);
		
		return vectorBound.createTransformedArea(transform);
		
		
	}
	

	public static final float[] sineTable = new float[]{
		0.0f ,
		0.01745240643728351f ,
		0.03489949670250097f ,
		0.05233595624294383f ,
		0.0697564737441253f ,
		0.08715574274765817f ,
		0.10452846326765346f ,
		0.12186934340514748f ,
		0.13917310096006544f ,
		0.15643446504023087f ,
		0.17364817766693033f ,
		0.1908089953765448f ,
		0.20791169081775931f ,
		0.22495105434386498f ,
		0.24192189559966773f ,
		0.25881904510252074f ,
		0.27563735581699916f ,
		0.2923717047227367f ,
		0.3090169943749474f ,
		0.3255681544571567f ,
		0.3420201433256687f ,
		0.35836794954530027f ,
		0.374606593415912f ,
		0.3907311284892737f ,
		0.40673664307580015f ,
		0.42261826174069944f ,
		0.4383711467890774f ,
		0.45399049973954675f ,
		0.4694715627858908f ,
		0.48480962024633706f ,
		0.49999999999999994f ,
		0.5150380749100542f ,
		0.5299192642332049f ,
		0.544639035015027f ,
		0.5591929034707468f ,
		0.573576436351046f ,
		0.5877852522924731f ,
		0.6018150231520483f ,
		0.6156614753256583f ,
		0.6293203910498375f ,
		0.6427876096865393f ,
		0.6560590289905073f ,
		0.6691306063588582f ,
		0.6819983600624985f ,
		0.6946583704589973f ,
		0.7071067811865475f ,
		0.7193398003386511f ,
		0.7313537016191705f ,
		0.7431448254773942f ,
		0.7547095802227719f ,
		0.766044443118978f ,
		0.7771459614569708f ,
		0.7880107536067219f ,
		0.7986355100472928f ,
		0.8090169943749475f ,
		0.8191520442889918f ,
		0.8290375725550417f ,
		0.8386705679454239f ,
		0.8480480961564261f ,
		0.8571673007021122f ,
		0.8660254037844386f ,
		0.8746197071393957f ,
		0.8829475928589269f ,
		0.8910065241883678f ,
		0.898794046299167f ,
		0.9063077870366499f ,
		0.9135454576426009f ,
		0.9205048534524404f ,
		0.9271838545667873f ,
		0.9335804264972017f ,
		0.9396926207859083f ,
		0.9455185755993167f ,
		0.9510565162951535f ,
		0.9563047559630354f ,
		0.9612616959383189f ,
		0.9659258262890683f ,
		0.9702957262759965f ,
		0.9743700647852352f ,
		0.9781476007338057f ,
		0.981627183447664f ,
		0.984807753012208f ,
		0.9876883405951378f ,
		0.9902680687415704f ,
		0.992546151641322f ,
		0.9945218953682733f ,
		0.9961946980917455f ,
		0.9975640502598242f ,
		0.9986295347545738f ,
		0.9993908270190958f ,
		0.9998476951563913f ,
		1.0f ,
		0.9998476951563913f ,
		0.9993908270190958f ,
		0.9986295347545738f ,
		0.9975640502598242f ,
		0.9961946980917455f ,
		0.9945218953682734f ,
		0.9925461516413221f ,
		0.9902680687415704f ,
		0.9876883405951377f ,
		0.984807753012208f ,
		0.981627183447664f ,
		0.9781476007338057f ,
		0.9743700647852352f ,
		0.9702957262759965f ,
		0.9659258262890683f ,
		0.9612616959383189f ,
		0.9563047559630355f ,
		0.9510565162951536f ,
		0.9455185755993168f ,
		0.9396926207859084f ,
		0.9335804264972017f ,
		0.9271838545667874f ,
		0.9205048534524404f ,
		0.913545457642601f ,
		0.90630778703665f ,
		0.8987940462991669f ,
		0.8910065241883679f ,
		0.8829475928589271f ,
		0.8746197071393959f ,
		0.8660254037844387f ,
		0.8571673007021123f ,
		0.8480480961564261f ,
		0.838670567945424f ,
		0.8290375725550417f ,
		0.819152044288992f ,
		0.8090169943749475f ,
		0.7986355100472927f ,
		0.788010753606722f ,
		0.777145961456971f ,
		0.766044443118978f ,
		0.7547095802227721f ,
		0.7431448254773945f ,
		0.7313537016191706f ,
		0.7193398003386511f ,
		0.7071067811865476f ,
		0.6946583704589975f ,
		0.6819983600624986f ,
		0.669130606358858f ,
		0.6560590289905073f ,
		0.6427876096865395f ,
		0.6293203910498374f ,
		0.6156614753256584f ,
		0.6018150231520486f ,
		0.5877852522924732f ,
		0.5735764363510459f ,
		0.5591929034707469f ,
		0.5446390350150273f ,
		0.5299192642332049f ,
		0.5150380749100544f ,
		0.49999999999999994f ,
		0.48480962024633717f ,
		0.4694715627858907f ,
		0.45399049973954686f ,
		0.4383711467890777f ,
		0.4226182617406995f ,
		0.40673664307580004f ,
		0.39073112848927377f ,
		0.37460659341591224f ,
		0.35836794954530066f ,
		0.3420201433256689f ,
		0.3255681544571566f ,
		0.3090169943749475f ,
		0.29237170472273705f ,
		0.2756373558169992f ,
		0.258819045102521f ,
		0.24192189559966773f ,
		0.2249510543438652f ,
		0.20791169081775931f ,
		0.19080899537654497f ,
		0.17364817766693072f ,
		0.15643446504023098f ,
		0.13917310096006533f ,
		0.12186934340514755f ,
		0.10452846326765373f ,
		0.0871557427476582f ,
		0.06975647374412552f ,
		0.05233595624294425f ,
		0.03489949670250114f ,
		0.01745240643728344f ,
		0.0f ,
		-0.017452406437283192f ,
		-0.0348994967025009f ,
		-0.052335956242943564f ,
		-0.06975647374412483f ,
		-0.08715574274765794f ,
		-0.1045284632676535f ,
		-0.12186934340514775f ,
		-0.13917310096006552f ,
		-0.15643446504023073f ,
		-0.17364817766693047f ,
		-0.19080899537654472f ,
		-0.20791169081775907f ,
		-0.22495105434386498f ,
		-0.2419218955996675f ,
		-0.25881904510252035f ,
		-0.2756373558169986f ,
		-0.29237170472273677f ,
		-0.30901699437494773f ,
		-0.32556815445715676f ,
		-0.34202014332566866f ,
		-0.35836794954530043f ,
		-0.374606593415912f ,
		-0.39073112848927355f ,
		-0.4067366430757998f ,
		-0.4226182617406993f ,
		-0.43837114678907707f ,
		-0.45399049973954625f ,
		-0.4694715627858905f ,
		-0.48480962024633734f ,
		-0.5000000000000001f ,
		-0.5150380749100542f ,
		-0.5299192642332048f ,
		-0.5446390350150271f ,
		-0.5591929034707467f ,
		-0.5735764363510458f ,
		-0.587785252292473f ,
		-0.601815023152048f ,
		-0.6156614753256578f ,
		-0.6293203910498373f ,
		-0.6427876096865393f ,
		-0.6560590289905074f ,
		-0.6691306063588582f ,
		-0.6819983600624984f ,
		-0.6946583704589974f ,
		-0.7071067811865475f ,
		-0.7193398003386509f ,
		-0.7313537016191705f ,
		-0.743144825477394f ,
		-0.7547095802227717f ,
		-0.7660444431189779f ,
		-0.7771459614569711f ,
		-0.7880107536067221f ,
		-0.7986355100472928f ,
		-0.8090169943749473f ,
		-0.8191520442889916f ,
		-0.8290375725550414f ,
		-0.838670567945424f ,
		-0.848048096156426f ,
		-0.8571673007021121f ,
		-0.8660254037844385f ,
		-0.8746197071393955f ,
		-0.882947592858927f ,
		-0.8910065241883678f ,
		-0.8987940462991668f ,
		-0.90630778703665f ,
		-0.913545457642601f ,
		-0.9205048534524403f ,
		-0.9271838545667873f ,
		-0.9335804264972016f ,
		-0.9396926207859082f ,
		-0.9455185755993168f ,
		-0.9510565162951535f ,
		-0.9563047559630353f ,
		-0.9612616959383189f ,
		-0.9659258262890683f ,
		-0.9702957262759965f ,
		-0.9743700647852351f ,
		-0.9781476007338056f ,
		-0.981627183447664f ,
		-0.984807753012208f ,
		-0.9876883405951377f ,
		-0.9902680687415703f ,
		-0.992546151641322f ,
		-0.9945218953682733f ,
		-0.9961946980917455f ,
		-0.9975640502598242f ,
		-0.9986295347545739f ,
		-0.9993908270190958f ,
		-0.9998476951563913f ,
		-1.0f ,
		-0.9998476951563913f ,
		-0.9993908270190958f ,
		-0.9986295347545739f ,
		-0.9975640502598243f ,
		-0.9961946980917455f ,
		-0.9945218953682733f ,
		-0.992546151641322f ,
		-0.9902680687415704f ,
		-0.9876883405951378f ,
		-0.9848077530122081f ,
		-0.9816271834476641f ,
		-0.9781476007338056f ,
		-0.9743700647852352f ,
		-0.9702957262759966f ,
		-0.9659258262890684f ,
		-0.961261695938319f ,
		-0.9563047559630354f ,
		-0.9510565162951536f ,
		-0.945518575599317f ,
		-0.9396926207859083f ,
		-0.9335804264972017f ,
		-0.9271838545667874f ,
		-0.9205048534524405f ,
		-0.9135454576426011f ,
		-0.9063077870366503f ,
		-0.898794046299167f ,
		-0.891006524188368f ,
		-0.8829475928589271f ,
		-0.8746197071393956f ,
		-0.8660254037844386f ,
		-0.8571673007021123f ,
		-0.8480480961564261f ,
		-0.8386705679454243f ,
		-0.8290375725550416f ,
		-0.8191520442889918f ,
		-0.8090169943749476f ,
		-0.798635510047293f ,
		-0.7880107536067223f ,
		-0.7771459614569713f ,
		-0.7660444431189781f ,
		-0.7547095802227721f ,
		-0.743144825477394f ,
		-0.7313537016191703f ,
		-0.7193398003386511f ,
		-0.7071067811865477f ,
		-0.6946583704589976f ,
		-0.6819983600624989f ,
		-0.6691306063588588f ,
		-0.6560590289905074f ,
		-0.6427876096865396f ,
		-0.6293203910498372f ,
		-0.6156614753256582f ,
		-0.6018150231520483f ,
		-0.5877852522924734f ,
		-0.5735764363510465f ,
		-0.5591929034707473f ,
		-0.544639035015027f ,
		-0.529919264233205f ,
		-0.5150380749100545f ,
		-0.5000000000000004f ,
		-0.48480962024633767f ,
		-0.4694715627858908f ,
		-0.45399049973954697f ,
		-0.4383711467890778f ,
		-0.4226182617406992f ,
		-0.40673664307580015f ,
		-0.3907311284892739f ,
		-0.37460659341591235f ,
		-0.35836794954530077f ,
		-0.34202014332566943f ,
		-0.3255681544571567f ,
		-0.3090169943749476f ,
		-0.29237170472273716f ,
		-0.27563735581699894f ,
		-0.2588190451025207f ,
		-0.24192189559966787f ,
		-0.22495105434386534f ,
		-0.20791169081775987f ,
		-0.19080899537654467f ,
		-0.1736481776669304f ,
		-0.15643446504023112f ,
		-0.13917310096006588f ,
		-0.12186934340514811f ,
		-0.1045284632676543f ,
		-0.08715574274765832f ,
		-0.06975647374412564f ,
		-0.05233595624294348f ,
		-0.034899496702500823f ,
		-0.01745240643728356f ,
		0.0f
	};

}
